"""
Django settings for sci_activity_doc project.

Generated by 'django-admin startproject' using Django 4.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import os
from datetime import timedelta
from pathlib import Path

from rest_framework.settings import api_settings

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY", default='dkjhskjfhueuifbckdjseif73t4r4ui384tged9-ree34')

LOCAL_ENV = "LOCAL"  # запуск в локальном окружении
DEV_ENV = "DEV"  # запуск в development окружении (в контейнере)
PROD_ENV = "PROD"  # запуск в production окружении

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = int(os.environ.get("DEBUG", default=0))

# 'DJANGO_ALLOWED_HOSTS' should be a single string of hosts with a space between each.
# For example: 'DJANGO_ALLOWED_HOSTS=localhost 127.0.0.1 [::1]'
ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
    '0.0.0.0',
]

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'api.apps.ApiConfig',
    'core.apps.CoreConfig',
    'gitlab_client.apps.GitlabClientConfig',
    'latex2html.apps.Latex2HtmlConfig',
    'auth_wrapper.apps.AuthWrapperConfig',
    'knox',  # токенная авторизация
    'computed_property',  # возможность создавать вычисляемые поля и хранить их в базе
    'django_filters',  # search suggestions
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',  # Управление сессиями между запросами
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',  # Связывает использующих сессии пользователей запросами
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'sci_activity_doc.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'sci_activity_doc.wsgi.application'

# время в секундах, на которое будет закеширован запрос детальной информации по заметке
NOTE_DETAIL_GET_CACHE_TIME = int(os.environ.get("NOTE_DETAIL_GET_CACHE_TIME", 60 * 20))
# если включено, то текст заметок будет преобразовываться в html
REMAKE_LATEX2HTML_ENABLE = bool(os.environ.get("REMAKE_LATEX2HTML_ENABLE", True))

GITLAB_API_ADDRESS = os.environ.get("GITLAB_API_ADDRESS")
GITLAB_ACCESS_TOKEN = os.environ.get("GITLAB_ACCESS_TOKEN")
GITLAB_ACCESS_TOKEN_HEADER_KEY = os.environ.get("GITLAB_ACCESS_TOKEN_HEADER_KEY", 'PRIVATE-TOKEN')
GITLAB_TIMEOUT = float(os.environ.get("GITLAB_TIMEOUT", default=2.))

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases
DATABASES = {
    "default": {
        "ENGINE": os.environ.get("SQL_ENGINE", "django.db.backends.sqlite3"),
        "NAME": os.environ.get("SQL_DATABASE", BASE_DIR / "db.sqlite3"),
        "USER": os.environ.get("SQL_USER", "user"),
        "PASSWORD": os.environ.get("SQL_PASSWORD", "password"),
        "HOST": os.environ.get("SQL_HOST", "localhost"),
        "PORT": os.environ.get("SQL_PORT", "5432"),
    }
}

if os.environ.get("ENVIRONMENT", default=PROD_ENV) in (LOCAL_ENV, DEV_ENV):
    FIXTURE_DIRS = [
        os.path.join(BASE_DIR, 'sci_activity_doc', 'fixtures', 'dev'),
        os.path.join(BASE_DIR, 'core', 'fixtures', 'dev'),
        os.path.join(BASE_DIR, 'latex2html', 'fixtures', 'dev'),
    ]
else:
    FIXTURE_DIRS = [
        os.path.join(BASE_DIR, 'sci_activity_doc', 'fixtures', 'prod'),
        os.path.join(BASE_DIR, 'core', 'fixtures', 'prod'),
        os.path.join(BASE_DIR, 'latex2html', 'fixtures', 'prod'),
    ]

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/
STATIC_ROOT = ''
STATIC_URL = 'static/'
STATICFILES_DIRS = ('static',)

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# переопределение модели пользователя
AUTH_USER_MODEL = 'core.User'

LOGIN_REDIRECT_URL = '/'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': ('knox.auth.TokenAuthentication',),
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
        'auth_wrapper.license.IsOwnerObjectOrIsProfessorOrReadOnly',
        'auth_wrapper.license.IsProfessorOrReadOnly',
    ],
}

# позволяет выставлять простые пароли в dev и local среде
if os.environ.get("ENVIRONMENT", default=PROD_ENV) in (LOCAL_ENV, DEV_ENV):
    AUTH_PASSWORD_VALIDATORS = [
        {
            'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
            'OPTIONS': {
                'min_length': 1,
            }
        },
    ]

# позволяет переопределить настройки аутентификации, в зависимости от окружения
if os.environ.get("ENVIRONMENT", default=PROD_ENV) in (LOCAL_ENV, DEV_ENV):
    REST_KNOX = {
        # MD5 is not secure and must never be used in production sites
        'SECURE_HASH_ALGORITHM': 'cryptography.hazmat.primitives.hashes.MD5',
        'USER_SERIALIZER': 'api.serializers.UserSerializer',
        'TOKEN_LIMIT_PER_USER': None,  # лимит токенов для каждого пользователя
        'EXPIRY_DATETIME_FORMAT': api_settings.DATETIME_FORMAT,
    }
else:
    REST_KNOX = {
        'SECURE_HASH_ALGORITHM': 'cryptography.hazmat.primitives.hashes.SHA512',  # в курсаче укажи что тут SHA512
        'USER_SERIALIZER': 'api.serializers.UserSerializer',
        'TOKEN_LIMIT_PER_USER': 3,  # лимит токенов для каждого пользователя
        'EXPIRY_DATETIME_FORMAT': api_settings.DATETIME_FORMAT,
    }
